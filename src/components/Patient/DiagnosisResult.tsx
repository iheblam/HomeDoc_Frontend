import { AlertTriangle, CheckCircle, Info, Star } from 'lucide-react';
import { Diagnosis } from '../../lib/supabase';
import { useState } from 'react';

interface DiagnosisResultProps {
  diagnosis: Diagnosis;
  onFeedback: (rating: number, comment: string) => void;
}

export function DiagnosisResult({ diagnosis, onFeedback }: DiagnosisResultProps) {
  const [showFeedback, setShowFeedback] = useState(false);
  const [rating, setRating] = useState(0);
  const [comment, setComment] = useState('');
  const [submitted, setSubmitted] = useState(false);

  const getSeverityColor = (level: string) => {
    switch (level) {
      case 'low':
        return 'bg-green-100 text-green-800 border-green-200';
      case 'medium':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'high':
        return 'bg-red-100 text-red-800 border-red-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const handleSubmitFeedback = () => {
    if (rating > 0) {
      onFeedback(rating, comment);
      setSubmitted(true);
    }
  };

  return (
    <div className="bg-white rounded-2xl shadow-lg p-8">
      <div className="flex items-start gap-4 mb-6">
        {diagnosis.requires_doctor ? (
          <AlertTriangle className="w-8 h-8 text-red-600 flex-shrink-0" />
        ) : (
          <CheckCircle className="w-8 h-8 text-green-600 flex-shrink-0" />
        )}
        <div className="flex-1">
          <h2 className="text-2xl font-bold text-gray-900 mb-2">
            Diagnosis Results
          </h2>
          {diagnosis.diagnosis_type === 'ai' && (
            <p className="text-sm text-gray-600">
              Generated by AI - {diagnosis.is_validated ? 'Validated by doctor' : 'Pending validation'}
            </p>
          )}
        </div>
      </div>

      <div className="space-y-6">
        <div>
          <h3 className="text-lg font-semibold text-gray-900 mb-2">Condition</h3>
          <p className="text-gray-700 text-lg">{diagnosis.disease_name}</p>
        </div>

        <div>
          <h3 className="text-lg font-semibold text-gray-900 mb-2">Severity Level</h3>
          <span
            className={`inline-block px-4 py-2 rounded-lg border font-medium ${getSeverityColor(
              diagnosis.severity_level
            )}`}
          >
            {diagnosis.severity_level.toUpperCase()}
          </span>
        </div>

        <div>
          <h3 className="text-lg font-semibold text-gray-900 mb-2">
            Recommendations
          </h3>
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <p className="text-gray-700 whitespace-pre-line">
              {diagnosis.recommendation}
            </p>
          </div>
        </div>

        {diagnosis.requires_doctor && (
          <div className="bg-red-50 border border-red-200 rounded-lg p-4 flex items-start gap-3">
            <Info className="w-5 h-5 text-red-600 flex-shrink-0 mt-0.5" />
            <div>
              <h4 className="font-semibold text-red-900 mb-1">
                Medical Attention Required
              </h4>
              <p className="text-red-800 text-sm">
                Based on your symptoms, we strongly recommend consulting with a healthcare professional for proper examination and treatment.
              </p>
            </div>
          </div>
        )}

        {!submitted ? (
          <div className="border-t pt-6">
            <button
              onClick={() => setShowFeedback(!showFeedback)}
              className="text-blue-600 hover:text-blue-700 font-medium text-sm"
            >
              {showFeedback ? 'Hide Feedback' : 'Provide Feedback'}
            </button>

            {showFeedback && (
              <div className="mt-4 space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    How helpful was this diagnosis?
                  </label>
                  <div className="flex gap-2">
                    {[1, 2, 3, 4, 5].map((value) => (
                      <button
                        key={value}
                        onClick={() => setRating(value)}
                        className="transition-transform hover:scale-110"
                      >
                        <Star
                          className={`w-8 h-8 ${
                            value <= rating
                              ? 'fill-yellow-400 text-yellow-400'
                              : 'text-gray-300'
                          }`}
                        />
                      </button>
                    ))}
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Additional comments (optional)
                  </label>
                  <textarea
                    value={comment}
                    onChange={(e) => setComment(e.target.value)}
                    rows={3}
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Share your experience..."
                  />
                </div>

                <button
                  onClick={handleSubmitFeedback}
                  disabled={rating === 0}
                  className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed font-medium"
                >
                  Submit Feedback
                </button>
              </div>
            )}
          </div>
        ) : (
          <div className="bg-green-50 border border-green-200 rounded-lg p-4 text-center">
            <CheckCircle className="w-6 h-6 text-green-600 mx-auto mb-2" />
            <p className="text-green-800 font-medium">
              Thank you for your feedback!
            </p>
          </div>
        )}
      </div>
    </div>
  );
}
